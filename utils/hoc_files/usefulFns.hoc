//******************************************************************************
//******************************************************************************
//								Useful Functions
//		Author:		Christopher Brian Currin
//		Version:	0.2
//		Contents:
//					showRunControl()	- NEURON's default run control
//					showV()				- NEURON's default voltage graph (slightly bigger)
//					viewPlot()			- set all graphs to 'View = plot'
//					useCV()				- use variable time step integration
//					disableCV()
//					iterator case()		- allow for loops of specific values
//					saveVecToFile()		- save a given vector to a given file name
//					saveVecsToFile() 	- save a list of vectors to a given file name
//					lambda_f()			- see geom_nseg()
//					geom_nseg()			- calculates best nseg for each segment
//					calcZ()				- calculate the impedence for a cell
//		Changelog:	
//					0.2.2:
//						extended saveVecsToFile to not overwrite an existing file
//					0.2.1:
//						included null objects
//						showV() and showRunControl() can only be useful once
//					0.2:
//						integreated d_lambda rule using geom_nseg
//						included calcZ
//					0.1.1:
//						saveVecsToFile - moved column names to top
//					0.1:
//						first version
//******************************************************************************
//******************************************************************************
load_file("stdrun.hoc")

objref NULL, null, NULLobject
//------------------------------------------------------------------------------
// make the runcontrol panel
//------------------------------------------------------------------------------
showRunControlFlag = 1 
proc showRunControl(){
	if(showRunControlFlag){
		load_file("nrngui.hoc")
		showRunControlFlag=0
		xpanel("RunControl", 0)
		xvalue("Init","v_init", 1,"stdinit()", 1, 1 )
		xbutton("Init & Run","run()")
		//xbutton("InitR","initR()")
		xbutton("Stop","stoprun=1")
		runStopAt = 5
		xvalue("Continue til","runStopAt", 1,"{continuerun(runStopAt) stoprun=1}", 1, 1 )
		runStopIn = 1
		xvalue("Continue for","runStopIn", 1,"{continuerun(t + runStopIn) stoprun=1}", 1, 1 )
		xbutton("Single Step","steprun()")
		t = 0
		xvalue("t","t", 2 )
		xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
		xvalue("dt","dt", 1,"setdt()", 0, 1 )
		steps_per_ms = 40
		xvalue("Points plotted/ms","steps_per_ms", 1,"setdt()", 0, 1 )
		screen_update_invl = 0.05
		xvalue("Scrn update invl","screen_update_invl", 1,"", 0, 1 )
		realtime = 0
		xvalue("Real Time","realtime", 0,"", 0, 1 )
		xpanel(13,325)
	}
}

//------------------------------------------------------------------------------
// Default voltage graph. name accesible as v_graph
//------------------------------------------------------------------------------
objref v_graph
proc showV(){
	if(v_graph==NULL){
		load_file("nrngui.hoc")     // required to prevent error in showV() with graphList
		v_graph = new Graph(0)  // creates but does not display a new Graph
		v_graph.size(0,tstop,-80,40)  // axis scaling.//not needed if using .exec_menu("View = plot")
		// forget about the scene_vector stuff
		v_graph.view(0, -80, tstop, 120, 300, 0, 1000, 400)  // draws it on the screen
		// in a window with user-specified location (5th and 6th args) and size (last 2 args)
		graphList[0].append(v_graph)  // graphList[0] is for all objects that are to be
		// updated at integer multiples of dt
		v_graph.addexpr("v(.5)", 1, 1, 0.8, 0.9, 2)
	}
}

//------------------------------------------------------------------------------
// View = plot for all graphs
//------------------------------------------------------------------------------
proc viewPlot(){ local uniqueI
	load_file("nrngui.hoc")
	numGraphs = graphList[0].count()
	for uniqueI = 0, (numGraphs-1){
		graphList[0].o(uniqueI).exec_menu("View = plot")
	}
}

//------------------------------------------------------------------------------
// use variable time step
//------------------------------------------------------------------------------
objectvar cvode
cvode = new CVode()
proc useCV(){
	// args:
	// 		tolerance (optional)

	cvode_active(1)
	// changed from cvode.active(1)
	// see ref [1] at bottom
	if(numarg()==1){
		cvode.atol($1)
	}
}
proc disableCV(){
	cvode_active(0)
}

//------------------------------------------------------------------------------
// allow for loops with specific cases
// this is the same as in stdlib.hoc
// example:
/*
	var = 0 	// define variable to be referenced before loop
	for case(&var,2,8,1,16){
		print(var)
	}
*/ 
//------------------------------------------------------------------------------
iterator case() {local i
        for i = 2, numarg() {           //must begin at 2 because the first argument is
                                        //in reference to the address
                $&1 = $i                //what is at the address will be changed
                iterator_statement      //This is where the iterator statement will
                                        //be executed.
        }
}

//------------------------------------------------------------------------------
// Save a Vector ($o2) to file ($s1)
//------------------------------------------------------------------------------
objectvar file
file=new File()
proc saveVecToFile(){
	// args:
	//      name of file 	(String)
	//      vector to save 	(Vector)
	file.wopen($s1)
	$o2.printf(file)
	file.close()
	print "saved to ",$s1
}

strdef uf_fileName
proc saveVecsToFile(){local i localobj tempmatrix
	// args:
	//      name of file 	(String)
	//		column names	(String)
	//      vectors to save (List)
	
	// assign $s1 (unique version) to uf_fileName
	checkUniqueFile($s1)
	file.wopen(uf_fileName)
	file.printf($s2)	//	must ensure MATLAB skips the first N lines (this (if has \n) and Matrix dimensions)
	
	// saved efficiently using matrix according to [2]
	tempmatrix = new Matrix()
	tempmatrix.resize($o3.o(0).size(),$o3.count())
	for i=0, $o3.count()-1{
		tempmatrix.setcol(i, $o3.o(i))
	}
	tempmatrix.fprint(file, " %g")	// %g - real number
	file.close()
	print "saved to ",$s1
}

proc checkUniqueFile(){ local multi, uniqueOutput
	uf_fileName = $s1
	multi = 0
	uniqueOutput = 0
	while(uniqueOutput==0){
		if(file.ropen(uf_fileName)==0){
			// file does not exist (yet)
			uniqueOutput=1
		}else{
			// add number to uf_fileName and (potentially) write to that one
			sprint(uf_fileName,"%s_%g",uf_fileName,multi)
			multi+=1
		}
		file.close()
	}
}


//------------------------------------------------------------------------------
// Sets nseg in each section to an odd value so that its segments are no longer 
// than d_lambda x the AC length constant at frequency freq in that section.
//
//  !!!!!!!!!!!!
//	NB: Be sure to specify your own Ra and cm before calling geom_nseg()
//
//	To understand why this works, and the advantages of using an odd value for
//  nseg, see  [3].
//------------------------------------------------------------------------------

// these are reasonable values for most models
freq = 100      // Hz, frequency at which AC length constant will be computed
d_lambda = 0.1
//==============================================================================
// calculate the space constant in response to a AC current
// lambda_f(freq=100)
//==============================================================================
func lambda_f() { local i, x1, x2, d1, d2, lam
        if (n3d() < 2) {
                return 1e5*sqrt(diam/(4*PI*$1*Ra*cm))
        }
        // above was too inaccurate with large variation in 3d diameter
        // so now we use all 3-d points to get a better approximate lambda
        x1 = arc3d(0)
        d1 = diam3d(0)
        lam = 0
        for i=1, n3d()-1 {
                x2 = arc3d(i)
                d2 = diam3d(i)
                lam += (x2 - x1)/sqrt(d1 + d2)
                x1 = x2   d1 = d2
        }
        //  length of the section in units of lambda
        lam *= sqrt(2) * 1e-5*sqrt(4*PI*$1*Ra*cm)

        return L/lam
}

proc geom_nseg() {
  //soma area(0.5) // make sure diam reflects 3d points
  forall { nseg = int((L/(d_lambda*lambda_f(freq))+0.9)/2)*2 + 1  }
}

//------------------------------------------------------------------------------
// Using the impedance class [4]
//------------------------------------------------------------------------------
objref zz, __secRef
zz = new Impedance()
FREQ = 0 // Hz

proc calcZ() {
    // NOTE: arg 1 is a SectionRef: https://www.neuron.yale.edu/neuron/static/new_doc/modelspec/programmatic/topology/secref.html
	if(numarg()==0){
	    soma __secRef = new SectionRef()
	    WHERE = 0.5
	}else{
	    __secRef = $o1
        WHERE = $2
	}
    __secRef.sec distance(0, WHERE)         // sets origin for distance calculations
    __secRef.sec zz.loc(WHERE)  	        // sets origin for impedance calculations
  	__secRef.sec zz.compute(FREQ, 1) 	    // takes the impedance contributions of
                                            // gating state differential equations into account
                                            // but requires mechanisms to be compatible with CVODE
    //print "x", "\t\t\t", "distance(x)", "\t", "zz.input(x)", "\t", "zz.input_phase(x)", "\t", "zz.transfer(x)", "\t", "zz.transfer_phase(x)", "\t", "zz.ratio(x)"
	//forall {
	//	print secname()
	//	for (x) print "\t", x, "\t \t", distance(x), "\t", zz.input(x), "\t", zz.input_phase(x), "\t", zz.transfer(x), "\t", zz.transfer_phase(x), "\t", zz.ratio(x)
	//}
}

//******************************************************************************
//******************************************************************************
//									References
//
//	[1]		https://www.neuron.yale.edu/phpBB/viewtopic.php?f=8&t=897&p=10447
//	[2]		http://www.anc.ed.ac.uk/school/neuron/tutorial/tutE.html
//	[3]		Hines, M.L. and Carnevale, N.T. NEURON: a tool for neuroscientists.The Neuroscientist 7:123-135, 2001
//	[4]		https://www.neuron.yale.edu/phpBB2/viewtopic.php?p=2498
//
//******************************************************************************
//******************************************************************************

print "******************************************************************************"
print "                         'usefulFns.hoc' loaded!                              "
print "******************************************************************************"
